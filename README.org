
#+TITLE: Reverie Linux, a desktop concept
#+AUTHOR: midnight-the-rock

Welcome to Reverie Linux, a developing environment designed to look as simple and functional as possible.

These are my dotfiles, which have proven to be an actual pain to keep in order (maybe I am way too disorganized, who knows). I have divided this readme into sections, so that I can keep these files in a sort of encapsulated written state and that way others can just go to the section/s they are interested in. 

Each section describe de dependencies required for that certain part of the build to work, the code that makes it possible, and an installation section, in case you just want a certain part of the whole dotfiles, you can just read the section you are interested in, copy the code and follow the installation.

There is also a [[General dependencies]] section, it will contain dependencies that are required by many parts of my dotfiles. If a certain part fails on its own, maybe is missing something from there (or maybe I am just bad at programming).

** Section index

- [[Installation]]
- [[Dependencies]]
- [[Widgets]]
- [[Window manager]]
- [[Terminal]]
- [[Notifications]]
- [[Launcher]]


** Installation

I made an installation script to get all the packages you need, this will require you to install [[https://github.com/Morganamilo/paru][paru]] first. You can run the script afterwards.

#+begin_src shell :tangle ./install/reverie_install.sh

  #!/bin/env bash 

  paru -S $(cat dependencies.txt)

#+end_src

It will then link all files of this proyect into their respective location. Each section describes where their files are going to end, you can read that or you can go check the actual script if you want the whole picture.


** Dependencies

#+begin_src txt :tangle ./install/dependencies.txt :tangle ./install/dependencies.txt

  rofi
  scrot
  eww-git
  redshift
  playerctl
  alsa-utils
  brightnessctl
  eww-git
  wmctrl
  zsh
  bat
  lsd
  nvim
  kitty
  starship
  neofetch
  xmonad
  xmonad-contrib
  ttf-iosevka
  ttf-ebgaramond

#+end_src


** Widgets

Both the status bar and the dashboard are widgets, configured entirely in an obscure language called yuck, decorated with even more obscure scss files, all packed in a piece of software I actually appreciate and love.

[[./screenshots/widgets.png]]


*** Global Variables 

These fetch information that may be used by any widget.

#+begin_src lisp :tangle ./widgets/eww.yuck

  (defpoll uptime :interval "1m"
	   "echo $(uptime -p | tr -d , | awk '{ print $1\" \"$2\" \"$3 }')")

  (defpoll battery :interval "5m"
	   "echo $(cat /sys/class/power_supply/BAT1/capacity)")

  (defpoll volume :interval "100ms"
	   "amixer get Master | grep Mono: | awk '{ print $4 }' | tr -d '[%]'")

  (defpoll brightness :interval "100ms"
	   "brightnessctl | grep Current | awk '{ print $4 }' | tr -d '(%)'")

  (defpoll player_title :interval "2s"
	   "./scripts/media-control.sh title")

  (defpoll player_artist :interval "2s"
	   "./scripts/media-control.sh artist")

  (defpoll player_cover :interval "10s"
	   "./scripts/media-control.sh cover")

  (defpoll clock_hour :interval "1m"
	   "echo $(date +%R | cut -d ':' -f 1)")

  (defpoll clock_minute :interval "1m"
	   "echo $(date +%R | cut -d ':' -f 2)")

  (defpoll current_month :interval "1h"
	   "date | cut -d ' ' -f1-3 | tr ' ' '/'")

  (defpoll memory :interval "1h"
	   "./scripts/memory-info.sh")


#+end_src


*** Global style

These varaibles help with the colorscheme, but they are going to be changed soon, don't pay too much attention to it.

#+begin_src scss :tangle ./widgets/eww.scss

  $_c0: #262026;
  $_c1: #1e191e;
  $_c2: #dbd7d2;

  $_c3: #3b363b;
  $_c4: #3c0835;
  $_c5: #986992;

  $_c6: #563d53;
  $_c7: #82687f;
  $_c8: #6a3864;

  @import "./dashboard/dashboard.scss";
  @import "./status_bar/status_bar.scss";

  ,* {
      all: unset;
      font-family: "Iosevka Nerd Font";
  } 

#+end_src


*** Widget: status bar

#+begin_src lisp :tangle ./widgets/eww.yuck

  (include "./status_bar/status_bar.yuck")

  (defwindow status_bar 
      :monitor 0 
      :stacking "bg" 
      :wm-ignore false
      :reserve (struts :distance "60px" :side "left")
      :geometry (geometry
		 :x 12 
		 :y 0
		 :height "97.6%"
		 :anchor "center left")
      (status_bar))

#+end_src

**** Main widget

#+begin_src lisp :tangle ./widgets/status_bar/status_bar.yuck

  (defwidget status_bar[]
      (box
       :class "status_bar_out"
       (centerbox
	:class "status_bar_in"
	:orientation "v"
	(status_workspaces) (box) (status_clock))))

#+end_src

#+begin_src scss :tangle ./widgets/status_bar/status_bar.scss

  .status_bar_in {
      background: $_c1;
  }

  .status_bar_out {
      padding: 5px;
      background: $_c0;
  }

#+end_src

**** Sub-widget: workspaces

#+begin_src lisp :tangle ./widgets/status_bar/status_bar.yuck

  (defpoll status_workspaces
      :interval "80ms" 
      "./scripts/workspace.sh")

  (defwidget status_workspaces[]
      (box 
       :class "lambda_box"
       (literal :content status_workspaces)))

#+end_src

#+begin_src scss :tangle ./widgets/status_bar/status_bar.scss

  .bar_workspace {
      padding: 0px 8px;
      font-size: 20px;
      background: $_c1;
  }

  .bar_workspaces {
      margin: 18px 10px 0px 0px;
  }

  .workspace-box {
      margin: 18px 10px 0px 0px;
  }

  .workspace-button {
      padding: 0px 8px;
      font-size: 20px;
      background: $_c1;
  }

#+end_src

**** Sub-widget: clock

#+begin_src lisp :tangle ./widgets/status_bar/status_bar.yuck

  (defwidget status_clock[]
      (box
       :valign "end"
       :orientation "v"    
       :space-evenly false :spacing 8
       :class "lambda_time"
       (box clock_hour) 
       (box clock_minute)))

#+end_src

#+begin_src scss :tangle ./widgets/status_bar/status_bar.scss

  .lambda_time {
      background: $_c0;

      margin: 4px;
      padding: 6px;
      font-size: 18px;
  }

#+end_src

**** Scripts

#+begin_src shell :tangle ./widgets/scripts/workspace.sh

  #!/bin/env bash

  # Generate an eww literal to dynamically update workspace location an occuptation 

  get-workspace-status() {
      wmctrl -d | awk '{ print $1 " " $2 }'
  }

  get-current-workspace() {
      get-workspace-status | while read -r id status; do
	  [[ $status == '*' ]]            && active_class="active"   || active_class="inactive"
	  [[ $active_class == "active" ]] && button_name="󰡱"         || button_name="󰫧"

	  echo -n "(button :class \"workspace-button\" :onclick \"wmctrl -s $ID\" \"$button_name\")"
      done
  }

  echo -e "(box :orientation \"v\"\
		:class \"workspace-box\"\
		:space-evenly false :spacing 15\
		$(get-current-workspace))"

#+end_src


*** Widget: dashboard

#+begin_src lisp :tangle ./widgets/eww.yuck

  (include "./dashboard/dashboard.yuck")

  (defwindow dashboard
      :monitor 0 
      :stacking "bg" 
      :geometry (geometry 
		 :x 0 
		 :y 0 
		 :anchor "center") 
      (dashboard))

#+end_src

**** Main widget

The dashboard is divided into three distinctive sections: header, upper half, and lower half, this widget will have them all grouped to be displayed.

#+begin_src lisp :tangle ./widgets/dashboard/dashboard.yuck

  (defwidget dashboard []
      (box 
       :class "dashboard_out" 
       (box 
	:class "dashboard_in"
	:spacing 8
	:space-evenly false 
	:orientation "v"

	(dashboard_header) (dashboard_upper_half) (dashboard_lower_half))))

#+end_src

#+begin_src scss :tangle ./widgets/dashboard/dashboard.scss

  .dashboard_out {
      background: $_c0;
  }

  .dashboard_in {
      margin: 5px;
      padding: 20px;
      background: $_c1;
  }

#+end_src


**** Header

This area holds components related to user-icon, time, and up-time (any other important information that is small enough to be here may be added in the future)

#+begin_src lisp :tangle ./widgets/dashboard/dashboard.yuck

  (defwidget dashboard_header []
    (centerbox
     :class "dashboard_header"
     :orientation "h"
     (dashboard_header_left) (box) (dashboard_header_right)))

  (defwidget dashboard_header_right []
    (box 
     :halign "end" 
     :space-evenly false 
     (dashboard_clock)))

  (defwidget dashboard_header_left []
    (box 
     :space-evenly false 
     (user_icon) (user_uptime)))

  (defwidget user_icon[]
      (box :class "user_icon"
	   :style "background-image: url('./assets/user.png')"))

  (defwidget user_uptime[]
      (box :class "user_uptime"
	   "│ ${uptime}"))

  (defwidget dashboard_clock[]
      (box 
       :class "user_uptime"
       "${clock_hour}:${clock_minute}"))

#+end_src

#+begin_src scss :tangle ./widgets/dashboard/dashboard.scss

  .dashboard_header {
      color: $_c2;
      font-size: 18px;
      padding: 0px 10px 10px 10px;
      background: $_c1;
  }

  .user_icon {
      background-position: center;
      background-repeat: no-repeat;
      background-size: cover;

      padding: 20px;
      border-radius: 50%;
      min-width: 8px;
      min-height: 8px;
  }

  .user_uptime {
      margin: 4px;
      padding: 0px 15px;
      font-size: 18px;
      color: $_c2;
      background: $_c1;
  }

#+end_src


**** Upper half

The upper half currently contains two big blocks, one being a calendar and the other being my agenda from emacs. Then finally mapped into a single object for the main widget.

#+begin_src lisp :tangle ./widgets/dashboard/dashboard.yuck

  (defwidget dashboard_upper_half []
    (box :orientation "h"
	 :space-evenly false :spacing 8
	 (dashboard_date) (dashboard_agenda)))

#+end_src

***** Calendar

#+begin_src lisp :tangle ./widgets/dashboard/dashboard.yuck

    (defwidget dashboard_date []
      (box :orientation "v"
	   :space-evenly false :spacing 0
	   :class "calendar_outer"
	   (box :halign "start" 
		:style  "padding: 4px 0px 8px 8px;"
		"󰃭  ${current_month}")
	   (calendar :class "calendar_inner"
		     :show-heading false)))

    (defpoll agenda :interval "2m" "./scripts/agenda.sh")

#+end_src

#+begin_src scss :tangle ./widgets/dashboard/dashboard.scss

  .calendar_outer {
      background: $_c0;
      border-radius:10px;;
      padding: 10px 10px 0px 10px;
      font-size: 18px;
  }

  .calendar_inner {
      background: $_c1;
      border-radius:10px;;
      padding: 8px 14px;
      font-size: 16px;
  }

  calendar {
      &:selected {
	  color: $_c2;
	  background: $_c1;
	  border-radius: 2px;
      }
  }

#+end_src


***** Agenda

#+begin_src lisp :tangle ./widgets/dashboard/dashboard.yuck

  (defwidget dashboard_agenda []
    (box  :class "agenda"
	  :orientation "v"
	  :valign "start"
	  :space-evenly false :spacing 8

	  (box :halign "start"
	       :style "padding: 4px 0px 0px 8px;"
	       "󱇘  Agenda")

	  (box (literal :content agenda))))

#+end_src

#+begin_src scss :tangle ./widgets/dashboard/dashboard.scss

  .agenda {
      background: $_c0;
      padding: 10px;
      min-width: 500px;
      font-size: 18px;
      border-radius: 10px;
  }

  .agenda_scroll {
      border-radius: 10px;
      background: $_c1;
      padding: 20px 20px;
      min-height: 250px;
  }

  .agenda_todo {
      color: #d1c9ab;
      font-weight: bold;
  }

  .agenda_header {
      color: #9aa8b3;
      font-size: 22px;
  }

#+end_src

#+begin_src shell :tangle ./widgets/scripts/agenda.sh

  #!/bin/env bash

  # generate a scrollable element with all agenda items

  agenda_location=$(echo $HOME/Desktop/agenda/*.org)

  get-agenda() {
      cat $agenda_location | while read -r line; do 
	  [[ $(echo "$line" | grep --regex "^\*") != '' ]] && {
	      no_indent_line=$(echo "$line" | tr -d '*') 
	      item_type=$(echo -e "$no_indent_line" | awk '{ print $1 }')
	      item_data=$(echo -e "$no_indent_line" | cut -d ' ' -f 3-20)

	      [[ $(echo "$line" | grep --regex "^\*\* ") != '' ]] && style_class="agenda_todo" || style_class="agenda_header"

	      [[ $style_class == "agenda_header" ]] && 
		  echo "(label :class \"$style_class\" :limit-width 44 :xalign 0.0 :text \"$no_indent_line\")" ||
		      echo "(box :space-evenly false :spacing 10 (label :class \"$style_class\" :limit-width 10 :xalign 0.0 :text \"$item_type\") (label :limit-width 44 :xalign 0.0 :text \"$item_data\"))"  
	  }
      done
  }

  echo -e "(scroll :class \"agenda_scroll\" :vscroll true :hscroll false (box :orientation \"v\" $(get-agenda)))"

#+end_src


**** Lower half

Lower half of the dashboard includes a music player, metrics for audio and brightness, session controls and information about battery and storage.

#+begin_src lisp :tangle ./widgets/dashboard/dashboard.yuck

  (defwidget dashboard_lower_half []
    (box :orientation "h" 
	 :space-evenly false :spacing 8
	 (music_player) (audio_visual_control) (session_control) (device_info)))

#+end_src

***** Music Player 

#+begin_src lisp :tangle ./widgets/dashboard/dashboard.yuck

      (defwidget music_player []
	(box :class "music_player"
	     :halign "start"
	     :orientation "h"
	     :space-evenly false :spacing 20
	     (player_cover) (player_info)))

      (defwidget player_cover[]
	  (box :class "player_cover"
	       :style player_cover))

      (defwidget player_info []
	(box :orientation "v"
	     :valign "start"
	     :space-evenly false :spacing 0 
	     (player_title) (player_artist) (player_buttons)))

      (defwidget player_title []
	(box :orientation "v"
	     :style "margin: 10px 0px 0px 0px;"
	     (label :xalign 0.0
		    :limit-width 18 
		    :text player_title)))

      (defwidget player_artist []
	(box :orientation "v"
	     :style "font-size: 14px;"
	     (label :xalign 0.0
		    :limit-width 20 
		    :text player_artist)))

      (defwidget player_buttons []
	(box :class "player_buttons"
	     :orientation "h"
	     :space-evenly false :spacing 20
	     (button :onclick "./scripts/mediaControl.sh next"   "󰼥")
	     (button :onclick "./scripts/mediaControl.sh toggle" "󰐎")
	     (button :onclick "./scripts/mediaControl.sh next"   "󰼦")))

#+end_src

#+begin_src scss :tangle ./widgets/dashboard/dashboard.scss

  .music_player {
      background: $_c0;
      padding: 12px 12px;
      min-width: 396px;
      border-radius: 10px;
      font-size: 22px;
  }

  .player_cover {
      background-size: cover;
      background-repeat: no-repeat;
      background-position: center;

      min-width: 130px;
      min-height: 120px;

      border-radius: 10%;
  }

  .player_buttons {
      font-size: 20px;
      margin: 30px 0px 0px 0px;
  }

#+end_src

#+begin_src shell :tangle ./widgets/scripts/media-control.sh

  #!/bin/env bash

  get-song-title() {
      local status="$(playerctl status)"

      [[ $status == 'Playing' || $status == 'Paused' ]] &&
	  echo -e "$(playerctl metadata title)" || echo -e "nothing..." 
  }

  get-song-cover() {
      curl $(playerctl metadata mpris:artUrl) --output ~/.config/eww/assets/cover.png &>/dev/null

      echo -e "background-image: url('./assets/cover.png');"
  }

  get-song-artist() {
      local status="$(playerctl status)"

      [[ $status == 'Playing' || $status == 'Paused' ]] &&
	  echo -e "$(playerctl metadata artist)" || echo -e " " 
  }

  case $1 in
      "title") get-song-title;;
      "cover") get-song-cover;;
      "artist") get-song-artist;;
      ,*) echo "invalid command!";;
  esac

#+end_src


***** Audio visual control

#+begin_src lisp :tangle ./widgets/dashboard/dashboard.yuck

  (defwidget audio_visual_control []
    (box :class "audio_visual_control"
	 :orientation "v"
	 :valign "center"
	 :space-evenly false :spacing 14
	  (box :space-evenly false
	       (scale :flipped false
		      :orientation "h"
		      :class "audio_visual_bar"
		      :min 0 
		      :max 101
		      :value brightness)
	       (box :class "audio_visual_icon" ""))
	  (box :space-evenly false
	       (scale :flipped false
		      :orientation "h"
		      :class "audio_visual_bar"
		      :min 0 :max 101
		      :value volume)
	       (box :class "audio_visual_icon" "󱄠"))))

#+end_src

#+begin_src scss :tangle ./widgets/dashboard/dashboard.scss
   
  .audio_visual_control {
      padding: 12px;
      border-radius: 10px;
      background: #262026;
  }

  scale.audio_visual_bar trough {
      background: $_c1;
      min-width: 256px;
      min-height: 60px;
      border-radius: 10px;;   
  }

  scale.audio_visual_bar trough highlight {
      background: #c9c0bb; 
      border-radius: 10px 2px 2px 10px;   
  }

  .audio_visual_icon {
      color: #1d5b5f;
      font-size: 20px;
      margin: 0px 0px -1px -470px;
  }

#+end_src


***** Session control

#+begin_src lisp :tangle ./widgets/dashboard/dashboard.yuck

  (defwidget session_control []
    (box :orientation "v"
	 :space-evenly false :spacing 8
	 (box :orientation "h"
	      :space-evenly false :spacing 8
	      (button :class "control_button" "󰤆")
	      (button :class "control_button" "󰤄"))
	 (box :orientation "h"
	      :space-evenly false :spacing 8
	      (button :class "control_button" "󰑫")
	      (button :class "control_button" "󰂯"))))

#+end_src

#+begin_src scss :tangle ./widgets/dashboard/dashboard.scss

  .control_button {
      background: $_c0;
      border-radius:10px;;
      padding: 22px 30px 22px 28px;
      font-size: 24px;
  }

#+end_src


***** Device info

#+begin_src lisp :tangle ./widgets/dashboard/dashboard.yuck

  (defwidget device_info []
    (box :class "device_info"
	 :valign "start"
	 :orientation "v"
	 :space-evenly false :spacing 12
	 (circular-progress :value battery
			    :start-at 75 
			    :thickness 6
			    :class "device_progress"
			    (box :class "device_progress_icon_a" " "))
	 (circular-progress :value {(EWW_DISK["/"].free / EWW_DISK["/"].total) * 100}
			    :start-at 75 
			    :thickness 6
			    :class "device_progress"
			    (box :class "device_progress_icon_b" "󰌨 "))))

#+end_src

#+begin_src scss :tangle ./widgets/dashboard/dashboard.scss

 .device_info {
      padding: 13px 10px 12px 10px;
      background: #262026;
      border-radius: 10px;
  }

  .device_progress {
      color: #b5bab5;
      background: #1e191e;
  }

  .device_progress_icon_a {
      padding: 16px;
      margin-right: 3px;
      margin-left: 3px;
      font-size: 22px;
  }

  .device_progress_icon_b {
      padding: 16px;
      margin-left: 6px;
      font-size: 22px;
  }

#+end_src


***** Resource usage


**** Scripts

#+begin_src shell :tangle ./widgets/scripts/dashboard.sh

  #!/bin/env bash

  # This simply serves as a toggle for the dashboard window

  [[ $(eww windows | grep "dashboard") == "*dashboard" ]] && eww close dashboard || eww open dashboard

#+end_src


*** Installation

#+begin_src shell :tangle ./install/reverie_install.sh

  ln -sf $(pwd)/widgets ~/.config/eww

#+end_src


** Window manager

*** Imports

#+begin_src haskell :tangle ./xmonad/xmonad.hs

  -- Reverie Xmonad Configs
  -- Author: midnight-the-rock

  import XMonad

  import XMonad.Util.EZConfig(additionalKeysP)
  import XMonad.Util.SpawnOnce 

  import XMonad.Layout.Gaps
  import XMonad.Layout.Grid
  import XMonad.Layout.Spacing

  import XMonad.Hooks.ManageDocks
  import XMonad.Hooks.DynamicLog
  import XMonad.Hooks.StatusBar
  import XMonad.Hooks.StatusBar.PP
  import XMonad.Hooks.EwmhDesktops

#+end_src


*** Keybinds

#+begin_src haskell :tangle ./xmonad/xmonad.hs

  reverieKeybinds :: [(String, X())]
  reverieKeybinds =  [ ("M-s",   spawn "scrot -u")
		     , ("M-S-s", spawn "scrot -s")
		     , ("M-p",   spawn "rofi -show drun")
		     , ("M-r",   spawn "redshift -P -O 3500")
		     , ("M-S-r", spawn "redshift -x")
		     , ("<XF86AudioNext>", spawn "playerctl next")
		     , ("<XF86AudioPrev>", spawn "playerctl previous")
		     , ("<XF86AudioPlay>", spawn "playerctl play-pause")
		     , ("<XF86AudioRaiseVolume>",    spawn "amixer sset Master 5+")
		     , ("<XF86AudioLowerVolume>",    spawn "amixer sset Master 5-")
		     , ("M-<XF86AudioRaiseVolume>",  spawn "brightnessctl set 5%+")
		     , ("M-<XF86AudioLowerVolume>",  spawn "brightnessctl set 5%-")
		     , ("M-d", spawn "bash /home/midnight/.config/eww/scripts/dashboard.sh")
		     ]

#+end_src


*** Layout hook

#+begin_src haskell :tangle ./xmonad/xmonad.hs

  reverieLayout =
    avoidStruts
    . spacing windowSpacing
    . gaps    windowGaps
    $ windowTall ||| Grid ||| Full
    where
      windowSpacing = 5
      windowGaps    = [(U, 8), (D, 8), (R,10), (L, 10)]
      windowTall    = Tall 1 (3/100) (1/2)

#+end_src


*** Startup hook 

#+begin_src haskell :tangle ./xmonad/xmonad.hs

  reverieStartup :: X()
  reverieStartup = do
    spawnOnce "setxkbmap -layout es,apl -option grp:win_switch -option ctrl:nocaps"
    spawnOnce "eww open status_bar"

#+end_src


*** Setup

#+begin_src haskell :tangle ./xmonad/xmonad.hs

  reverieSetup = def
    { terminal           = "env XMODIFIERS= emacs"
    , borderWidth        = 4
    , normalBorderColor  = "#262026"
    , focusedBorderColor = "#dbd7d2"
    , manageHook         = manageHook def <+> manageDocks
    , layoutHook         = reverieLayout
    , startupHook        = reverieStartup
    } `additionalKeysP`    reverieKeybinds

  main :: IO()
  main = xmonad $ ewmh $ ewmhFullscreen $ reverieSetup

#+end_src


*** Installation

#+begin_src shell :tangle ./install/reverie_install.sh

  ln -sf $(pwd)/xmonad/ ~/.config/xmonad
  xmonad --recompile 

#+end_src


** Terminal 

[[./screenshots/terminal.png]]

*** Shell

#+begin_src shell :tangle ./terminal/zshrc

  alias g++="g++ -Werror -Wall -Wextra -pedantic -std=c++20"
  alias vim="nvim"
  alias cat="bat"
  alias ls="lsd"
  alias neofetch="clear && echo \"\" && neofetch"

  eval "$(starship init zsh)"

#+end_src

*** Prompt

#+begin_src toml :tangle ./terminal/starship.toml

  "$schema" = 'https://starship.rs/config-schema.json'

  add_newline = true

  format = """$status """

  right_format = "$git_branch $git_metrics$directory"

  [status]
  symbol          = " [ ](bg:#1e191e fg:#0c4f63)[∆](fg:#b36c4b bg:#1e191e)[ ](bg:#1e191e fg:#0c4f63)"
  success_symbol  = " [ ](bg:#1e191e fg:#91a3b0)[∆](fg:#4a5a64 bg:#1e191e)[ ](bg:#1e191e fg:#91a3b0)"
  disabled = false
  format = '$symbol'

  [directory]
  disabled = false
  format = " [ ](fg:#2e191e bg:#848C94)[   ┃ $path ](bg:#848C94 fg:#1e191e)[ ](fg:#1e191e bg:#848C94) "

  [git_branch]
  symbol = ''
  format = '[$symbol $branch](fg:#b1a7a8 bg:#1e191e) '

  [git_metrics]
  disabled = false
  only_nonzero_diffs = false
  format = '[ ](fg:#1e191e bg:#8c7d7b)[ +$added ](fg:#1e191e bg:#8c7d7b)[┃](bg:#8c7d7b fg:#1e191e)[ -$deleted ](fg:#1e191e bg:#8c7d7b)[ ](fg:#1e191e bg:#8c7d7b)'

#+end_src

*** Neofetch

Of course, a good terminal cannot live without a proper neofetch.

#+begin_src txt :tangle ./terminal/neofetch/ascii

      ▄████▄          
     ███  ██▄
     ▀▀    ██▄        
            ██       
           ████       
         ██████▄      
        ██▀  ███      
      ▄██▀    ██▄▄██  
      ██▀      ▀██▀

#+end_src

#+begin_src shell :tangle ./terminal/neofetch/config.conf
  
  print_info() {
      info " ​ ​ ${cl7}██ 󰑩 " local_ip
      info " ​ ​ ${cl7}██ 󰟀 " wm
      info " ​ ​ ${cl3}██ 󰘳 " cpu
      info " ​ ​ ${cl7}██ 󰘚 " gpu
      info " ​ ​ ${cl3}██ 󰅶 " shell
      info " ​ ​ ${cl3}██  " who_knows
      info " ​ ​ ${cl7}██  " packages 
  }

  who_knows="who knows"
  kernel_shorthand="on"
  distro_shorthand="off"
  os_arch="on"
  uptime_shorthand="on"
  memory_percent="on"
  package_managers="on"
  shell_path="off"
  shell_version="off"
  speed_type="bios_limit"
  speed_shorthand="on"
  cpu_brand="off"
  cpu_speed="off"
  cpu_cores="logical"
  cpu_temp="off"
  gpu_brand="off"
  gpu_type="all"
  refresh_rate="on"
  gtk_shorthand="on"
  gtk2="on"
  gtk3="on"
  public_ip_host="http://ident.me"
  public_ip_timeout=2
  disk_show=('/')
  music_player="vlc"
  song_format="%artist% - %title%"
  song_shorthand="off"
  colors=(distro)
  bold="on"
  underline_enabled="on"
  underline_char="-"
  separator=" "
  color_blocks="off"
  block_range=(0 15) # Colorblocks

  # Colors for custom colorblocks
  magenta="\033[1;35m"
  green="\033[1;32m"
  white="\033[1;37m"
  blue="\033[1;34m"
  red="\033[1;31m"
  black="\033[1;40;30m"
  yellow="\033[1;33m"
  cyan="\033[1;36m"
  reset="\033[0m"
  bgyellow="\033[1;43;33m"
  bgwhite="\033[1;47;37m"

  cl0="${reset}"
  cl1="${magenta}"
  cl2="${green}"
  cl3="${white}"
  cl4="${blue}"
  cl5="${red}"
  cl6="${yellow}"
  cl7="${cyan}"
  cl8="${black}"
  cl9="${bgyellow}"
  cl10="${bgwhite}"

  block_width=4
  block_height=1

  bar_char_elapsed="-"
  bar_char_total="="
  bar_border="on"
  bar_length=15
  bar_color_elapsed="distro"
  bar_color_total="distro"

  cpu_display="on"
  memory_display="on"
  battery_display="on"
  disk_display="on"

  image_backend="ascii"
  image_source="$HOME/.config/neofetch/ascii"
  image_size="auto"
  image_loop="off"

  ascii_distro="arch_small"
  ascii_colors=(distro)
  ascii_bold="on"

  thumbnail_dir="${XDG_CACHE_HOME:-${HOME}/.cache}/thumbnails/neofetch"
  crop_mode="normal"
  crop_offset="center"

  gap=2

  yoffset=0
  xoffset=0

  stdout="off"

#+end_src

*** Terminal emulator

#+begin_src conf :tangle ./terminal/kitty/kitty.conf
  # no audio bell
  enable_audio_bell no 

  # fonts
  font_family BlexMono Nerd Font 
  font_size 18

  # background & foreground
  background #1e191e
  foreground #b1a7a8

  # tab bar 
  tab_bar_style powerline
  tab_powerline_style round
  active_tab_title_template "󰘧 [{title}]"
  active_tab_background #131313
  active_tab_foreground #c9c9c9
  inactive_tab_background #272727
  inactive_tab_foreground #c9c9c9

  # keymaps
  map ctrl+n new_tab
  map ctrl+shift+n set_tab_title
  map ctrl+w close_tab
  map ctrl+space next_tab

  background_opacity 1.0
  window_padding_width 8
  shell zsh

#+end_src


*** Installation

#+begin_src shell :tangle ./install/reverie_install.sh

  ln -sf $(pwd)/terminal/zshrc ~/.zshrc 
  ln -sf $(pwd)/terminal/kitty ~/.config/kitty 
  ln -sf $(pwd)/terminal/starship.toml ~/.config/starship.toml 

#+end_src


** Notifications

work in progress...


** Launcher

work in progress..


